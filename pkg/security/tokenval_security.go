package security

import (
	"go/token"

	"github.com/coopersec/go-backend-malware/app/models"
	"github.com/gofiber/fiber/v2"
	"github.com/golang-jwt/jwt"
	"github.com/koddr/tutorial-go-fiber-rest-api/app/models"
)

func TokenValidation(c *fiber.Ctx) (bool, error) {
	token, err := verifyToken(c)
	if err != nil {
		return false, err
	}

	// Setting and checking token and credentials.
	claims, ok := token.Claims.(jwt.MapClaims)
	if ok && token.Valid {
		// Expires time.
		expires := int64(claims["exp"].(float64))

		return true, nil
	}

	return false, err
}

func verifyToken(c *fiber.Ctx, privateKey string, token models.JWTStruct) (*jwt.Token, error) {

	token, err := jwt.Parse(token.Token, privateKey)
	if err != nil {
		return nil, err
	}

	return token, nil
}
